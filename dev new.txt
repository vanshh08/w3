from tkinter import *
import tkinter.filedialog as fd
import tkinter.messagebox as mb
import tkinter.simpledialog as sd
import os

# Creating all the functions of all the buttons in the Notepad
def open_file():
    global file
    file = fd.askopenfilename(defaultextension='.txt', filetypes=[('All Files', '*.*'), ("Text File", "*.txt*")])
    if file != '':
        root.title(f"{os.path.basename(file)}")
        text_area.delete(1.0, END)
        with open(file, "r") as file_:
            text_area.insert(1.0, file_.read())
    else:
        file = None

def open_new_file():
    root.title("Untitled - Notepad")
    text_area.delete(1.0, END)

def save_file():
    global file
    if file == '':
        file = None
    else:
        with open(file, "w") as file_:
            file_.write(text_area.get(1.0, END))

    if file is None:
        file = fd.asksaveasfilename(initialfile='Untitled.txt', defaultextension='.txt',
                                    filetypes=[("Text File", "*.txt*"), ("Word Document", '*,docx*'), ("PDF", "*.pdf*")])
    else:
        with open(file, "w") as file_:
            file_.write(text_area.get(1.0, END))
        root.title(f"{os.path.basename(file)} - Notepad")

def exit_application():
    root.destroy()

def copy_text():
    text_area.event_generate("<<Copy>>")

def cut_text():
    text_area.event_generate("<<Cut>>")

def paste_text():
    text_area.event_generate("<<Paste>>")

def select_all():
    text_area.tag_add("sel", 1.0, END)

def delete_last_char():
    current_text = text_area.get(1.0, END)
    if len(current_text) > 1:
        text_area.delete("end-2c", "end-1c")
    elif len(current_text) == 2:
        text_area.delete(1.0, END)

def clear_text():
    text_area.delete(1.0, END)

def about_notepad():
    mb.showinfo("About Notepad", "This is just another Notepad, but this is better than all others")

def about_commands():
    commands = """
Under the File Menu:
- 'New' clears the entire Text Area
- 'Open' clears text and opens another file
- 'Save' saves your current file 
- 'Save As' saves your file in another extension

Under the Edit Menu:
- 'Copy' copies the selected text to your clipboard
- 'Cut' cuts the selected text and removes it from the text area 
- 'Paste' pastes the copied/cut text
- 'Select All' selects the entire text
- 'Delete' deletes the last character  
"""
    mb.showinfo("All commands", commands)

def find_text():
    search_term = sd.askstring("Find", "Enter text to find:")
    if search_term:
        text_area.tag_remove("found", 1.0, END)
        start_pos = text_area.search(search_term, 1.0, END)
        while start_pos:
            end_pos = f"{start_pos}+{len(search_term)}c"
            text_area.tag_add("found", start_pos, end_pos)
            start_pos = text_area.search(search_term, end_pos, END)
        text_area.tag_config("found", foreground="red", background="yellow")

def replace_text():
    find_term = sd.askstring("Replace", "Enter text to replace:")
    if find_term:
        replace_term = sd.askstring("Replace", "Enter replacement text:")
        content = text_area.get(1.0, END)
        new_content = content.replace(find_term, replace_term)
        text_area.delete(1.0, END)
        text_area.insert(1.0, new_content)

def undo_action():
    try:
        text_area.edit_undo()  # This allows for undoing the last edit
    except TclError:
        mb.showinfo("Undo", "Nothing to undo.")

# Initializing the window
root = Tk()
root.title("Untitled - Notepad")
root.geometry('800x500')
root.resizable(True, True)

# Setting up the grid for the main window
root.columnconfigure(0, weight=1)
root.rowconfigure(0, weight=1)

file = ''

# Setting the basic components of the window
menu_bar = Menu(root)
root.config(menu=menu_bar)

text_area = Text(root, font=("Times New Roman", 12), undo=True)  # Enable undo
text_area.grid(sticky=NSEW)

scroller = Scrollbar(text_area, orient=VERTICAL)
scroller.pack(side=RIGHT, fill=Y)

scroller.config(command=text_area.yview)
text_area.config(yscrollcommand=scroller.set)

# Adding the File Menu and its components
file_menu = Menu(menu_bar, tearoff=False, activebackground='DodgerBlue')
file_menu.add_command(label="New", command=open_new_file)
file_menu.add_command(label="Open File", command=open_file)
file_menu.add_command(label="Save As", command=save_file)
file_menu.add_separator()
file_menu.add_command(label="Close File", command=exit_application)
menu_bar.add_cascade(label="File", menu=file_menu)

# Adding the Edit Menu and its components
edit_menu = Menu(menu_bar, tearoff=False, activebackground='DodgerBlue')
edit_menu.add_command(label='Copy', command=copy_text)
edit_menu.add_command(label='Cut', command=cut_text)
edit_menu.add_command(label='Paste', command=paste_text)
edit_menu.add_separator()
edit_menu.add_command(label='Select All', command=select_all)
edit_menu.add_command(label='Delete All', command=clear_text)
edit_menu.add_command(label='Find', command=find_text)
edit_menu.add_command(label='Replace', command=replace_text)
edit_menu.add_separator()
edit_menu.add_command(label='Undo', command=undo_action)
menu_bar.add_cascade(label="Edit", menu=edit_menu)

# Adding the Help Menu and its components
help_menu = Menu(menu_bar, tearoff=False, activebackground='DodgerBlue')
help_menu.add_command(label='About Notepad', command=about_notepad)
help_menu.add_command(label='About Commands', command=about_commands)
menu_bar.add_cascade(label="Help", menu=help_menu)

root.config(menu=menu_bar)

# Finalizing the window
root.update()
root.mainloop()
